<#ftl encoding="UTF-8">

package ${uisuite.package};

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlAttribute;
import org.bridje.web.view.*;
import org.bridje.web.view.controls.Control;
import javax.annotation.Generated;

/**
 * Provides the ability to define the content of a placeholder of the parent
 * layout of the given view.
 */
@Generated(value = "org.bridje.web.srcgen.WebSourceGenerator", date = "${.now?string("yyyy-MM-dd")}", comments = "Generated by Bridje Web API")
@XmlAccessorType(XmlAccessType.FIELD)
public class ${uisuite.name}Defines implements Defines
{
    @XmlAttribute
    private String name;

    <#if uisuite.defines?? && uisuite.defines.content??>
    @XmlElements(
    {
        <#list uisuite.defines.content![] as c>
        @XmlElement( name = "${c.name}", type = ${c.type}.class ),
        </#list>
    })
    <#else>
    @XmlTransient
    </#if>
    private List<Control> controls;

    /**
     * Gest the name of the placeholder to be defined.
     * 
     * @return The name of the placeholder.
     */
    public String getName()
    {
        return name;
    }

    /**
     * The list of controls that must be place in the defined placeholder.
     * 
     * @return A list of controls.
     */
    public List<Control> getControls()
    {
        if (controls == null)
        {
            controls = new ArrayList<>();
        }
        return controls;
    }

    /**
     * The control that must be place in the defined placeholder.
     * 
     * @return The control.
     */
    public Control getControl()
    {
        if (controls != null && controls.size() > 0)
        {
            return controls.get(0);
        }
        return null;
    }
}
